from sqlalchemy import text
from database import engine, SessionLocal
import database as db

def migrate():
    """‡πÄ‡∏û‡∏¥‡πà‡∏° column is_active ‡πÉ‡∏´‡πâ user ‡πÄ‡∏î‡∏¥‡∏°"""
    
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á migrate database...")
    
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° column is_active (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
        with engine.connect() as conn:
            try:
                conn.execute(text("ALTER TABLE users ADD COLUMN is_active BOOLEAN DEFAULT TRUE"))
                conn.commit()
                print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° column is_active ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                if "duplicate column" in str(e).lower() or "already exists" in str(e).lower():
                    print("‚ö†Ô∏è  Column is_active ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    raise
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ is_active = True
        session = SessionLocal()
        try:
            result = session.execute(text("UPDATE users SET is_active = TRUE WHERE is_active IS NULL"))
            session.commit()
            print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {result.rowcount} users ‡πÉ‡∏´‡πâ active")
        finally:
            session.close()
        
        print("‚úÖ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
    except Exception as e:
        print(f"‚ùå Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    migrate()