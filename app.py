import streamlit as st
import pandas as pd
from datetime import datetime
import auth
import database as db
import floor_price as fp
from config import Config

# Page config
st.set_page_config(
    page_title="Floor Price Validator",
    page_icon="üí∞",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .success-box {
        padding: 20px;
        border-radius: 10px;
        background-color: #d4edda;
        border: 2px solid #28a745;
        text-align: center;
    }
    .error-box {
        padding: 20px;
        border-radius: 10px;
        background-color: #f8d7da;
        border: 2px solid #dc3545;
        text-align: center;
    }
    .metric-card {
        padding: 15px;
        border-radius: 8px;
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
    }
</style>
""", unsafe_allow_html=True)

def main_app():
    """Main application after login"""
    
    # Header with logout
    col1, col2 = st.columns([4, 1])
    with col1:
        st.title("Floor Price Validator")
    with col2:
        st.write(f"üë§ {st.session_state.user_email}")
        if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
            auth.logout()
    
    # Tabs
    if st.session_state.is_admin:
        tab1, tab2, tab3, tab4 = st.tabs([
            "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤", 
            "üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", 
            "üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",  # ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° tab ‡∏ô‡∏µ‡πâ
            "üîß Admin Dashboard"
        ])
    else:
        tab1, tab2 = st.tabs(["‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤", "üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"])
    
    # Tab 1: Price Check
    with tab1:
        price_check_interface()
    
    # Tab 2: User History
    with tab2:
        user_history_interface()
    
    # Tab 3: User Management (only for admins)
    if st.session_state.is_admin:
        with tab3:
            user_management_interface()
    
    # Tab 4: Admin Dashboard (only for admins)
    if st.session_state.is_admin:
        with tab4:
            admin_dashboard()

def price_check_interface():
    """Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤"""
    st.header("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ Broadband")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à")
        
        # Customer type
        customer_type = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            options=['residential', 'business'],
            format_func=lambda x: Config.CUSTOMER_TYPES.get(x, x),
            help="Residential = ‡∏ö‡πâ‡∏≤‡∏ô, Business = ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"
        )
        
        # Speed selection
        speed_options = sorted(Config.SPEED_PRICES[customer_type].keys())
        speed = st.selectbox(
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï (Mbps)",
            options=speed_options,
            index=1 if len(speed_options) > 1 else 0
        )
        
        # Distance
        max_distance = Config.MAX_STANDARD_DISTANCE[customer_type]
        distance = st.number_input(
            f"‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (‡∏Å‡∏°.) - ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‚â§{max_distance} ‡∏Å‡∏°.",
            min_value=0.0,
            max_value=100.0,
            value=1.0,
            step=0.5,
            help=f"‡πÄ‡∏Å‡∏¥‡∏ô {max_distance} ‡∏Å‡∏°. ‡∏à‡∏∞‡∏Ñ‡∏¥‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏° {Config.EXTRA_DISTANCE_MULTIPLIER}x"
        )
        
        # Fixed IP
        has_fixed_ip = st.checkbox(
            f"Fixed IP (+{Config.FIXED_IP_PRICE[customer_type]} ‡∏ø/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
            help="IP Address ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Remote Access, CCTV, Server"
        )
        
        # Equipment
        st.write("**‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á**")
        equipment_list = []
        
        col_eq1, col_eq2 = st.columns(2)
        
        with col_eq1:
            if st.checkbox("Standard Router", value=True):
                equipment_list.append('standard_router')
            if st.checkbox("WiFi 6 Router (+500‡∏ø)"):
                equipment_list.append('wifi6_router')
            if st.checkbox("Mesh System (+1500‡∏ø)"):
                equipment_list.append('mesh_system')
        
        with col_eq2:
            if st.checkbox("ONT (+300‡∏ø)"):
                equipment_list.append('ont')
            if customer_type == 'business':
                if st.checkbox("Managed Switch (+800‡∏ø)"):
                    equipment_list.append('managed_switch')
                if st.checkbox("Enterprise Router (+2000‡∏ø)"):
                    equipment_list.append('enterprise_router')
        
        # Contract period
        contract_months = st.select_slider(
            "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
            options=[12, 24, 36],
            value=24
        )
        
        # Show discount
        discount_rate = Config.CONTRACT_DISCOUNTS[customer_type].get(contract_months, 0)
        if discount_rate > 0:
            st.info(f"üí∞ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î {contract_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {discount_rate*100:.0f}%")
    
    with col2:
        st.subheader("üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠")
        
        proposed_price = st.number_input(
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
            min_value=0.0,
            value=1000.0,
            step=50.0
        )
        
        notes = st.text_area("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", height=100)
        
        st.write("")
        
        # Check button
        if st.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤", type="primary", width='stretch'):
            # Calculate floor price
            result = fp.calculate_floor_price(
                customer_type=customer_type,
                speed=speed,
                distance=distance,
                equipment_list=equipment_list,
                contract_months=contract_months,
                has_fixed_ip=has_fixed_ip
            )
            
            floor_price = result['floor_price']
            breakdown = result['breakdown']
            
            is_valid = proposed_price >= floor_price
            margin = fp.calculate_margin(proposed_price, floor_price)
            
            # Log the check
            db.log_price_check(
                user_email=st.session_state.user_email,
                customer_type=customer_type,
                speed=speed,
                distance=distance,
                equipment=','.join(equipment_list),
                contract_months=contract_months,
                proposed_price=proposed_price,
                floor_price=floor_price,
                is_valid=is_valid,
                margin_percent=margin,
                has_fixed_ip=has_fixed_ip,
                notes=notes
            )
            
            # Display result
            st.write("---")
            
            if is_valid:
                st.markdown(f"""
                <div class="success-box">
                    <h2>‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≤‡∏ô!</h2>
                    <p style="font-size: 20px;">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ floor price</p>
                    <p style="font-size: 18px; color: #28a745;"><strong>Margin: {margin:.2f}%</strong></p>
                </div>
                """, unsafe_allow_html=True)
            else:
                difference = floor_price - proposed_price
                st.markdown(f"""
                <div class="error-box">
                    <h2>‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô!</h2>
                    <p style="font-size: 20px;">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ floor price</p>
                    <p style="font-size: 18px; color: #dc3545;"><strong>‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {difference:.2f} ‡∏ö‡∏≤‡∏ó</strong></p>
                </div>
                """, unsafe_allow_html=True)
            
            # Show breakdown for admins
            if st.session_state.is_admin:
                st.write("---")
                st.info(f"üîê **Admin Only - Floor Price: {floor_price:.2f} ‡∏ø/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**")
                
                with st.expander("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
                    st.json(breakdown)
                
                # Installation fee
                installation_fee = fp.get_installation_fee(customer_type)
                st.caption(f"üí° ‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: {installation_fee:,.0f} ‡∏ö‡∏≤‡∏ó (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÉ‡∏ô monthly)")

def user_management_interface():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ users (Admin only)"""
    st.header("üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    # User stats
    stats = db.get_user_stats()
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("üë• ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", stats['total'])
    col2.metric("‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ", stats['active'])
    col3.metric("‚ùå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", stats['inactive'])
    col4.metric("üîê Admin", stats['admins'])
    
    st.write("---")
    
    # Add new user
    with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà", expanded=False):
        col1, col2 = st.columns([3, 1])
        
        with col1:
            new_email = st.text_input(
                "Email", 
                placeholder=f"user@{Config.ALLOWED_EMAIL_DOMAIN}",
                key="new_user_email"
            )
        
        with col2:
            new_is_admin = st.checkbox("Admin", key="new_user_admin")
        
        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", type="primary"):
            if not new_email:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å email")
            elif '@' not in new_email:
                st.error("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            elif not auth.is_valid_email_domain(new_email):
                st.error(f"‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ email ‡∏Ç‡∏≠‡∏á {Config.ALLOWED_EMAIL_DOMAIN} ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            else:
                existing_user = db.get_user(new_email)
                if existing_user:
                    st.error("‚ùå ‡∏°‡∏µ email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    db.create_user(new_email, new_is_admin)
                    st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {new_email} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.rerun()
    
    st.write("---")
    
    # User list
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    users = db.get_all_users()
    
    if not users:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    
    # Create DataFrame for display
    for user in users:
        with st.container():
            col1, col2, col3, col4, col5 = st.columns([3, 1, 1, 1, 2])
            
            with col1:
                status_icon = "‚úÖ" if user.is_active else "‚ùå"
                admin_badge = "üîê Admin" if user.is_admin else "üë§ User"
                st.write(f"{status_icon} **{user.email}** ({admin_badge})")
                if user.last_login:
                    st.caption(f"Login ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {user.last_login.strftime('%Y-%m-%d %H:%M')}")
                else:
                    st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login")
            
            with col2:
                # Toggle active status
                current_status = "‡πÄ‡∏õ‡∏¥‡∏î" if user.is_active else "‡∏õ‡∏¥‡∏î"
                if st.button(f"üîÑ {current_status}", key=f"toggle_{user.id}"):
                    db.update_user(user.email, is_active=not user.is_active)
                    st.rerun()
            
            with col3:
                # Toggle admin status
                if user.email != st.session_state.user_email:  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                    admin_text = "‡∏•‡∏î" if user.is_admin else "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô"
                    if st.button(f"‚ö° {admin_text}", key=f"admin_{user.id}"):
                        db.update_user(user.email, is_admin=not user.is_admin)
                        st.rerun()
            
            with col4:
                # Delete user
                if user.email != st.session_state.user_email:  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                    if st.button("üóëÔ∏è ‡∏•‡∏ö", key=f"delete_{user.id}"):
                        st.session_state[f'confirm_delete_{user.id}'] = True
            
            with col5:
                # Confirm delete
                if st.session_state.get(f'confirm_delete_{user.id}', False):
                    if st.button(f"‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö {user.email}", key=f"confirm_{user.id}", type="secondary"):
                        db.delete_user(user.email)
                        st.success(f"‚úÖ ‡∏•‡∏ö {user.email} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        if f'confirm_delete_{user.id}' in st.session_state:
                            del st.session_state[f'confirm_delete_{user.id}']
                        st.rerun()
            
            st.divider()
    
    # Export user list
    st.write("---")
    df = pd.DataFrame([{
        'Email': user.email,
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' if user.is_active else '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        'Role': 'Admin' if user.is_admin else 'User',
        '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠': user.created_at.strftime('%Y-%m-%d %H:%M'),
        'Login ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î': user.last_login.strftime('%Y-%m-%d %H:%M') if user.last_login else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login'
    } for user in users])
    
    csv = df.to_csv(index=False).encode('utf-8-sig')
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (CSV)",
        data=csv,
        file_name=f'users_{datetime.now().strftime("%Y%m%d")}.csv',
        mime='text/csv'
    )

def user_history_interface():
    """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á user"""
    st.header("üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    
    logs = db.get_user_logs(st.session_state.user_email)
    
    if not logs:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        return
    
    # Summary metrics
    total_checks = len(logs)
    valid_checks = sum(1 for log in logs if log.is_valid)
    invalid_checks = total_checks - valid_checks
    
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_checks)
    col2.metric("‡∏ú‡πà‡∏≤‡∏ô ‚úÖ", valid_checks)
    col3.metric("‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‚ùå", invalid_checks)
    
    st.write("---")
    
    # Table
    df = pd.DataFrame([{
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': log.checked_at.strftime('%Y-%m-%d %H:%M'),
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': 'üè†' if log.customer_type == 'residential' else 'üè¢',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß': f"{log.speed} Mbps",
        '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á': f"{log.distance} km",
        'Fixed IP': '‚úÖ' if log.has_fixed_ip else '‚ùå',
        '‡∏™‡∏±‡∏ç‡∏ç‡∏≤': f"{log.contract_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏™‡∏ô‡∏≠': f"{log.proposed_price:,.0f} ‡∏ø",
        '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö': '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' if log.is_valid else '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô',
        'Margin': f"{log.margin_percent:.1f}%" if log.margin_percent else '-',
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': log.notes or '-'
    } for log in logs])
    
    st.dataframe(df, width='stretch', hide_index=True)

def admin_dashboard():
    """Admin dashboard - ‡πÅ‡∏™‡∏î‡∏á floor price ‡πÅ‡∏•‡∏∞ log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    st.header("üîß Admin Dashboard")
    
    # Summary
    all_logs = db.get_all_logs(limit=500)
    
    if not all_logs:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    total = len(all_logs)
    valid = sum(1 for log in all_logs if log.is_valid)
    invalid = total - valid
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total)
    col2.metric("‡∏ú‡πà‡∏≤‡∏ô ‚úÖ", valid)
    col3.metric("‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‚ùå", invalid)
    col4.metric("Pass Rate", f"{(valid/total*100):.1f}%")
    
    st.write("---")
    
    # Floor Price Calculator
    with st.expander("üîê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Floor Price (Admin Only)"):
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            calc_customer_type = st.selectbox(
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 
                ['residential', 'business'],
                format_func=lambda x: 'üè† ‡∏ö‡πâ‡∏≤‡∏ô' if x == 'residential' else 'üè¢ ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                key='admin_customer_type'
            )
        
        with col2:
            speed_options = sorted(Config.SPEED_PRICES[calc_customer_type].keys())
            calc_speed = st.selectbox(
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß", 
                speed_options,
                key='admin_speed'
            )
        
        with col3:
            calc_distance = st.number_input(
                "‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (km)", 
                0.0, 100.0, 1.0, 
                key='admin_distance'
            )
        
        with col4:
            calc_has_fixed_ip = st.checkbox(
                "Fixed IP",
                key='admin_fixed_ip'
            )
        
        with col5:
            calc_contract = st.selectbox(
                "‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", 
                [12, 24, 36],
                key='admin_contract'
            )
        
        if st.button("üîç ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", width='stretch'):
            result = fp.calculate_floor_price(
                customer_type=calc_customer_type,
                speed=calc_speed,
                distance=calc_distance,
                equipment_list=['standard_router'],
                contract_months=calc_contract,
                has_fixed_ip=calc_has_fixed_ip
            )
            
            floor = result['floor_price']
            breakdown = result['breakdown']
            
            st.success(f"üí∞ Floor Price: **{floor:,.2f} ‡∏ø/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**")
            
            # Show breakdown
            with st.expander("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
                col_a, col_b = st.columns(2)
                
                with col_a:
                    st.write("**‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:**")
                    st.write(f"- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {breakdown['base_price']:,.2f} ‡∏ø")
                    st.write(f"- ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á ({breakdown['distance_km']} km): {breakdown['distance_cost']:,.2f} ‡∏ø")
                    if breakdown.get('fixed_ip_cost', 0) > 0:
                        st.write(f"- Fixed IP: {breakdown['fixed_ip_cost']:,.2f} ‡∏ø")
                    st.write(f"- ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {breakdown['equipment_cost']:,.2f} ‡∏ø")
                
                with col_b:
                    st.write("**‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**")
                    if breakdown.get('business_premium', 0) > 0:
                        st.write(f"- Business Premium (+10%): +{breakdown['business_premium']:,.2f} ‡∏ø")
                    st.write(f"- ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î {breakdown['contract_months']} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ({breakdown['discount_rate']*100:.0f}%): -{breakdown['discount_amount']:,.2f} ‡∏ø")
                    st.write(f"**‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {floor:,.2f} ‡∏ø/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**")
                
                # Installation fee
                installation_fee = fp.get_installation_fee(calc_customer_type)
                st.info(f"üí° ‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: {installation_fee:,.0f} ‡∏ö‡∏≤‡∏ó (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÉ‡∏ô monthly)")
    
    st.write("---")
    
    # All logs
    st.subheader("üìã Log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    df = pd.DataFrame([{
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': log.checked_at.strftime('%Y-%m-%d %H:%M'),
        'User': log.user_email.split('@')[0],
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': 'üè†' if log.customer_type == 'residential' else 'üè¢',  # ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß': log.speed,
        '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á': log.distance,
        'Fixed IP': '‚úÖ' if log.has_fixed_ip else '‚ùå',  # ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°
        '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå': log.equipment,
        '‡∏™‡∏±‡∏ç‡∏ç‡∏≤': log.contract_months,
        '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏™‡∏ô‡∏≠': log.proposed_price,
        'Floor Price': log.floor_price,
        '‡∏ú‡πà‡∏≤‡∏ô': '‚úÖ' if log.is_valid else '‚ùå',
        'Margin%': round(log.margin_percent, 1) if log.margin_percent else 0,
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': log.notes or '-'
    } for log in all_logs])
    
    st.dataframe(df, width='stretch', hide_index=True)
    
    # Export
    csv = df.to_csv(index=False).encode('utf-8-sig')
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
        data=csv,
        file_name=f'floor_price_logs_{datetime.now().strftime("%Y%m%d")}.csv',
        mime='text/csv'
    )

# Main entry point
if __name__ == "__main__":
    # Check authentication
    auth.require_auth()
    
    # Run main app if authenticated
    main_app()