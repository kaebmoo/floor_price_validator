import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formataddr
from datetime import datetime
import streamlit as st
from config import Config
import database as db

def is_valid_email_domain(email):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á domain ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    domain = email.split('@')[-1]
    return domain.lower() == Config.ALLOWED_EMAIL_DOMAIN.lower()

def send_otp_email(email, otp_code):
    """‡∏™‡πà‡∏á OTP ‡∏ú‡πà‡∏≤‡∏ô email"""
    
    # Development Mode - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á email ‡∏à‡∏£‡∏¥‡∏á
    if Config.DEV_MODE:
        st.session_state.dev_otp_code = otp_code  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        return True
    
    # Production Mode - ‡∏™‡πà‡∏á email ‡∏à‡∏£‡∏¥‡∏á
    try:
        msg = MIMEMultipart()
        msg['From'] = formataddr((Config.SENDER_NAME, Config.FROM_EMAIL))
        msg['To'] = email
        msg['Subject'] = '‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Floor Price Validator'
        
        body = f"""
        <html>
        <body>
            <h2>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
            <p>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: <strong style="font-size: 24px; color: #0066cc;">{otp_code}</strong></p>
            <p>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô {Config.OTP_EXPIRY_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
            <p><em>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</em></p>
            <br>
            <p>‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</p>
            <p>‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÇ‡∏ó‡∏£‡∏Ñ‡∏°‡∏ô‡∏≤‡∏Ñ‡∏°‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)</p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(body, 'html'))
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ SSL ‡∏´‡∏£‡∏∑‡∏≠ STARTTLS ‡∏ï‡∏≤‡∏° port
        if Config.SMTP_PORT == 465:
            # SSL connection (port 465)
            import ssl
            context = ssl.create_default_context()
            server = smtplib.SMTP_SSL(Config.SMTP_SERVER, Config.SMTP_PORT, context=context)
        else:
            # STARTTLS connection (port 587 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
            server = smtplib.SMTP(Config.SMTP_SERVER, Config.SMTP_PORT)
            server.starttls()
        
        server.login(Config.SMTP_USERNAME, Config.SMTP_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        return True
        
    except smtplib.SMTPAuthenticationError:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö email ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password")
        return False
    except smtplib.SMTPException as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î SMTP: {str(e)}")
        return False
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ: {str(e)}")
        return False

def login_page():
    """‡∏´‡∏ô‡πâ‡∏≤ Login"""
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Floor Price Validator")
    
    # Show dev mode indicator
    if Config.DEV_MODE:
        st.warning("üîß **Development Mode** - OTP ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á email ‡∏à‡∏£‡∏¥‡∏á)")
    
    # Initialize session state
    if 'otp_sent' not in st.session_state:
        st.session_state.otp_sent = False
    if 'email_for_otp' not in st.session_state:
        st.session_state.email_for_otp = None
    if 'dev_otp_code' not in st.session_state:
        st.session_state.dev_otp_code = None
    
    if not st.session_state.otp_sent:
        # Step 1: Request OTP
        st.markdown("### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏£‡∏≠‡∏Å Email")
        
        if Config.DEV_MODE:
            email = st.text_input(
                "Email", 
                placeholder="test@example.com (‡πÉ‡∏ô dev mode ‡πÉ‡∏ä‡πâ email ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ)"
            )
        else:
            email = st.text_input(
                "Email ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", 
                placeholder=f"yourname@{Config.ALLOWED_EMAIL_DOMAIN}"
            )
        
        if st.button("‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP", type="primary"):
            if not email:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å email")
                return
            
            email = email.strip()
            if '@' not in email:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ @ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏° domain ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                email = f"{email}@ntplc.co.th"

                # st.error("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
            if not is_valid_email_domain(email):
                st.error(f"‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ email ‡∏Ç‡∏≠‡∏á {Config.ALLOWED_EMAIL_DOMAIN} ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            else:
                with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå...'):
                    try:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        user = db.get_user(email)
                        
                        if not user:
                            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                            st.info("üìß Admin Email: " + ", ".join(Config.ADMIN_EMAILS))
                            return
                        
                        if not user.is_active:
                            st.error("‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin")
                            st.info("üìß Admin Email: " + ", ".join(Config.ADMIN_EMAILS))
                            return
                        
                        # Generate and send OTP
                        otp_code = db.create_otp(email)
                        
                        if send_otp_email(email, otp_code):
                            st.session_state.otp_sent = True
                            st.session_state.email_for_otp = email
                            st.success("‚úÖ ‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            st.rerun()
                        else:
                            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    
                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                        import traceback
                        st.code(traceback.format_exc())
    
    else:
        # Step 2: Verify OTP
        st.markdown("### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP")
        st.info(f"üìß ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà {st.session_state.email_for_otp}")
        
        # Show OTP in dev mode
        if Config.DEV_MODE and st.session_state.dev_otp_code:
            st.success(f"üîß **DEV MODE - ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:** `{st.session_state.dev_otp_code}`")
        
        otp_input = st.text_input(
            "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP (6 ‡∏´‡∏•‡∏±‡∏Å)", 
            max_chars=6,
            key="otp_input_field"
        )
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP", type="primary"):
                if not otp_input:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP")
                elif len(otp_input) != 6:
                    st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 6 ‡∏´‡∏•‡∏±‡∏Å")
                else:
                    with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP...'):
                        try:
                            if db.verify_otp(st.session_state.email_for_otp, otp_input):
                                user = db.get_user(st.session_state.email_for_otp)
                                
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤ user ‡∏¢‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà
                                if not user.is_active:
                                    st.error("‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                                    st.session_state.otp_sent = False
                                    st.session_state.email_for_otp = None
                                    return
                                
                                # Update last login
                                user.last_login = datetime.utcnow()
                                
                                st.session_state.logged_in = True
                                st.session_state.user_email = st.session_state.email_for_otp
                                st.session_state.is_admin = user.is_admin
                                st.session_state.otp_sent = False
                                st.session_state.dev_otp_code = None
                                st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                                st.rerun()
                            else:
                                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")
                        except Exception as e:
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                            import traceback
                            st.code(traceback.format_exc())
        
        with col2:
            if st.button("‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà"):
                st.session_state.otp_sent = False
                st.session_state.email_for_otp = None
                st.session_state.dev_otp_code = None
                st.rerun()

def logout():
    """Logout function"""
    for key in ['logged_in', 'user_email', 'is_admin', 'otp_sent', 'email_for_otp']:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

def require_auth():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"""
    if 'logged_in' not in st.session_state or not st.session_state.logged_in:
        login_page()
        st.stop()